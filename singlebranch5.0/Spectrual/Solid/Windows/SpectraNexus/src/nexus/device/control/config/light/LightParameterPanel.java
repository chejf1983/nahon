/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nexus.device.control.config.light;

import java.util.logging.Level;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellEditor;
import nahon.comm.faultsystem.FaultCenter;
import nahon.comm.tool.languange.LanguageHelper;
import sps.dev.control.ifs.ISPDevLightControl;
import sps.dev.data.SSAsyLightPar;
import sps.dev.data.SSynLightPar;

/**
 *
 * @author jiche
 */
public class LightParameterPanel extends javax.swing.JPanel {

    private ISPDevLightControl device;

    /**
     * Creates new form NewJPanel
     */
    public LightParameterPanel() {
        initComponents();
        
        this.Button_SetSWPara.setText(LanguageHelper.getIntance().GetText("Button_Set"));
    }

    public void SetCollector(ISPDevLightControl device) {
        this.device = device;
        this.InitMyComponents();
    }

    private ISPDevLightControl.LightType GetTypeByIndex(int index) {
        switch (index) {
            case 0:
                return ISPDevLightControl.LightType.Sus;
            case 1:
                return ISPDevLightControl.LightType.Asyn;
            case 2:
                return ISPDevLightControl.LightType.Syn;
            default:
                return ISPDevLightControl.LightType.Syn;
        }
    }

    private void InitMyComponents() {
        //初始化语言包
        LightSource.addItem(LanguageHelper.getIntance().GetText("SustainLight"));
        LightSource.addItem(LanguageHelper.getIntance().GetText("AsyncLight"));
        LightSource.addItem(LanguageHelper.getIntance().GetText("SyncLight"));

        //初始化光源参数和类型
        switch (device.GetLLgihtType()) {
            case Sus:
                this.LightSource.setSelectedIndex(0);
//                this.InitLightSourcePar(GetTypeByIndex(0));
                break;
            case Asyn:
                this.LightSource.setSelectedIndex(1);
//                this.InitLightSourcePar(GetTypeByIndex(1));
                break;
            case Syn:
                this.LightSource.setSelectedIndex(2);
//                this.InitLightSourcePar(GetTypeByIndex(2));
                break;
            default:
                throw new AssertionError(device.GetLLgihtType().toString());
        }

        this.SourceLight_Table.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

        this.lightTable = new JTable() {
            @Override
            public TableCellEditor getCellEditor(int row, int column) {
                if (column == 1) {
                    return new DefaultCellEditor(new MyCheckBox());
                } else {
                    return super.getCellEditor(row, column);
                }
            }
        };

    }

    private class MyCheckBox extends JCheckBox {

    }

    //更新光源参数
    private SSAsyLightPar asypar;
    private SSynLightPar synpar;
    private boolean[] lightlist;
    private JTable lightTable;

    private void InitLightSourcePar(ISPDevLightControl.LightType type) {
        this.TablePane.setViewportView(SourceLight_Table);
        try{
        switch (type) {
            case Sus:
                lightlist = this.device.GetLightPar();
                SourceLight_Table.setModel(new SustainLightParTable(lightlist));
                break;
            case Asyn:
                asypar = this.device.GetASynLightPar();
                SourceLight_Table.setModel(new AsynLightParTable(asypar));
                break;
            case Syn:
                synpar = this.device.GetSynLightPar();
                SourceLight_Table.setModel(new SynLightParTable(synpar));
                break;
            default:
        }
        }catch(Exception ex){
            FaultCenter.Instance().SendFaultReport(Level.SEVERE, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LightSource = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        TablePane = new javax.swing.JScrollPane();
        SourceLight_Table = new javax.swing.JTable();
        Button_SetSWPara = new javax.swing.JButton();

        LightSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LightSourceItemStateChanged(evt);
            }
        });

        jLabel1.setText("光源设置：");

        SourceLight_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePane.setViewportView(SourceLight_Table);

        Button_SetSWPara.setText("Set");
        Button_SetSWPara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SetSWParaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LightSource, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Button_SetSWPara, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(LightSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button_SetSWPara)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Button_SetSWParaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SetSWParaActionPerformed
        try {
            switch (GetTypeByIndex(LightSource.getSelectedIndex())) {
                case Sus:
                    this.device.SetLightPar(lightlist);
                    break;
                case Asyn:
                    this.device.SetASynLightPar(asypar);
                    break;
                case Syn:
                    this.device.SetSynLightPar(synpar);
                    break;
                default:
            }
            this.device.SetLLgihtType(GetTypeByIndex(LightSource.getSelectedIndex()));            
            JOptionPane.showMessageDialog(this, "设置成功!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_Button_SetSWParaActionPerformed

    private void LightSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LightSourceItemStateChanged
        if (LightSource.getItemCount() != 0) {
            try {
                InitLightSourcePar(GetTypeByIndex(LightSource.getSelectedIndex()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_LightSourceItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_SetSWPara;
    private javax.swing.JComboBox LightSource;
    private javax.swing.JTable SourceLight_Table;
    private javax.swing.JScrollPane TablePane;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
