package nexus.app.raman;

import java.awt.CardLayout;
import java.io.File;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import sps.dev.data.SSpectralDataPacket;
import sps.dev.control.ifs.ISPDevControl.CSTATE;
import sps.platform.SpectralPlatService;
import nahon.comm.event.Event;
import nahon.comm.event.EventListener;
import nahon.comm.faultsystem.FaultCenter;
import chart.data.CSPData;
import chart.spchart.panel.SpectralChartPane;
import nexus.main.compent.FileDialogHelp;
import table.std.SPDataTablePane;
import org.jfree.chart.ChartUtilities;
import sps.dev.control.ifs.ISPDevControl;
import table.data.TSPData;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jiche
 */
public class StanderAppUI extends javax.swing.JPanel {

    public StanderAppUI() {
        initComponents();

        //初始化表格和曲线
        this.InitTableAndChart();

        //初始化控制器
        this.InitDataAnalyzer();

        this.InitControl();
    }

    // <editor-fold defaultstate="collapsed" desc="初始化表格和曲线"> 
    private SPDataTablePane dataTablePane = new SPDataTablePane();

    private SpectralChartPane dataChartPane = new SpectralChartPane();

    private JSplitPane chartAnddataSplit;

    //初始化表格界面
    private void InitTableAndChart() {
        this.dataTablePane.SetTitle("SpectralDataTable", "Original");

        this.dataChartPane.SetMaxRange(65535, -1000);

        chartAnddataSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, dataChartPane, null);
        chartAnddataSplit.setResizeWeight(1.0);
        /* Init Display Area */
        DisplayArea.setLayout(new CardLayout());
        DisplayArea.add(chartAnddataSplit);
    }

    //刷新表格
    private void UpdateTable(SSpectralDataPacket main) {
        this.dataTablePane.UpdateData(new TSPData(main.data.waveIndex, main.data.datavalue));
    }

    //刷新主曲线
    private void UpdateChart(SSpectralDataPacket main) {
        this.dataChartPane.DisplaySPData("main", new CSPData(main.data.waveIndex, main.data.datavalue));
    }

    //刷新快照
    private void UpdataChartSnapShort(SSpectralDataPacket[] sp) {
        String[] name = new String[sp.length];
        CSPData[] data = new CSPData[sp.length];
        for (int i = 0; i < name.length; i++) {
            name[i] = "SP-" + i;
            data[i] = new CSPData(sp[i].data.waveIndex, sp[i].data.datavalue);
        }
        this.dataChartPane.DisplaySnapShot(name, data);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="注册控制器"> 
    private void InitDataAnalyzer() {
        /* Register to DataSource */
        SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().RegisterDataCollectListener(new EventListener<SSpectralDataPacket>() {
            @Override
            public void recevieEvent(final Event<SSpectralDataPacket> event) {
                DisplayData(event.GetEvent());
//                SwingUtilities.invokeLater(new Runnable() {
//                    @Override
//                    public void run() {
////                        DisplayData(event.GetEvent());
//                    }
//                });
            }
        });
    }

    private void DisplayData(SSpectralDataPacket data) {
        /* display main data */
        this.UpdateTable(data);
        this.UpdateChart(data);
    }
    // </editor-fold>

    ISPDevControl devcontrol = SpectralPlatService.GetInstance().GetDevManager().GetDevControl();

    private void InitControl() {
        devcontrol.RegisterStateChange(new EventListener<CSTATE>() {
            @Override
            public void recevieEvent(Event<CSTATE> event) {
                Button_update.setEnabled(event.GetEvent() == CSTATE.CONNECT);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DisplayArea = new javax.swing.JPanel();
        Button_SaveImage = new javax.swing.JButton();
        Button_SaveData = new javax.swing.JButton();
        Button_AddSnapShot = new javax.swing.JButton();
        Button_DeletSnapShot = new javax.swing.JButton();
        ToggleButton_DataTable = new javax.swing.JToggleButton();
        Label_Temper = new javax.swing.JLabel();
        Label_Battery1 = new javax.swing.JLabel();
        Temper_input = new javax.swing.JLabel();
        Battery_input = new javax.swing.JLabel();
        Button_update = new javax.swing.JButton();

        DisplayArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout DisplayAreaLayout = new javax.swing.GroupLayout(DisplayArea);
        DisplayArea.setLayout(DisplayAreaLayout);
        DisplayAreaLayout.setHorizontalGroup(
            DisplayAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        DisplayAreaLayout.setVerticalGroup(
            DisplayAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        Button_SaveImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/bmp_save.png"))); // NOI18N
        Button_SaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SaveImageActionPerformed(evt);
            }
        });

        Button_SaveData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/xls_save.png"))); // NOI18N
        Button_SaveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SaveDataActionPerformed(evt);
            }
        });

        Button_AddSnapShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/add_snap.png"))); // NOI18N
        Button_AddSnapShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_AddSnapShotActionPerformed(evt);
            }
        });

        Button_DeletSnapShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/delete_snap.png"))); // NOI18N
        Button_DeletSnapShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_DeletSnapShotActionPerformed(evt);
            }
        });

        ToggleButton_DataTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/datatable.png"))); // NOI18N
        ToggleButton_DataTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleButton_DataTableActionPerformed(evt);
            }
        });

        Label_Temper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/temper.png"))); // NOI18N

        Label_Battery1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/battery.png"))); // NOI18N

        Temper_input.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        Temper_input.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Temper_input.setText("00.00°C");

        Battery_input.setFont(new java.awt.Font("微软雅黑", 0, 18)); // NOI18N
        Battery_input.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Battery_input.setText("00.00%");

        Button_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nexus/app/resources/update.png"))); // NOI18N
        Button_update.setEnabled(false);
        Button_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DisplayArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Button_SaveImage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Button_SaveData, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Button_AddSnapShot, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Button_DeletSnapShot, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(ToggleButton_DataTable, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Label_Battery1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Battery_input, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_Temper)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Temper_input, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button_update, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Button_AddSnapShot, Button_DeletSnapShot, Button_SaveData, Button_SaveImage, ToggleButton_DataTable});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Battery_input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label_Battery1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label_Temper, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Temper_input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ToggleButton_DataTable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Button_update))
                        .addGap(2, 2, 2)
                        .addComponent(DisplayArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Button_SaveImage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Button_SaveData, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Button_AddSnapShot, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Button_DeletSnapShot, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Battery_input, Button_AddSnapShot, Button_DeletSnapShot, Button_SaveData, Button_SaveImage, Label_Battery1, Label_Temper, Temper_input, ToggleButton_DataTable});

    }// </editor-fold>//GEN-END:initComponents

    private void Button_SaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SaveImageActionPerformed
        try {
            File file = FileDialogHelp.GetFilePath(".png");
            if (file != null) {
                try (FileOutputStream bout = new java.io.FileOutputStream(file)) {
                    ChartUtilities.writeBufferedImageAsPNG(bout, this.dataChartPane.GetChartPanePNG());
                    bout.flush();
                }
            }
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex);
            Logger.getLogger(StanderAppUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Button_SaveImageActionPerformed

    private void Button_SaveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SaveDataActionPerformed
        try {
            File file = FileDialogHelp.GetFilePath(".xls");
            if (file != null) {
                SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().SaveToExcel(file.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "保存成功!");
            }
        } catch (Exception ex) {
            FaultCenter.Instance().SendFaultReport(Level.SEVERE, "保存记录失败!");
            Logger.getGlobal().log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Button_SaveDataActionPerformed

    private void Button_AddSnapShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_AddSnapShotActionPerformed
        SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().AddSnapShot();
        UpdataChartSnapShort(SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().GetSnapShots());
    }//GEN-LAST:event_Button_AddSnapShotActionPerformed

    private void Button_DeletSnapShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_DeletSnapShotActionPerformed
        SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().DelSnapShot();
        UpdataChartSnapShort(SpectralPlatService.GetInstance().GetAppManager().GetCommonApp().GetSnapShots());
    }//GEN-LAST:event_Button_DeletSnapShotActionPerformed

    private void ToggleButton_DataTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleButton_DataTableActionPerformed
        if (ToggleButton_DataTable.isSelected()) {
            chartAnddataSplit.setRightComponent(dataTablePane);
        } else {
            chartAnddataSplit.setRightComponent(null);
        }
    }//GEN-LAST:event_ToggleButton_DataTableActionPerformed

    private void UpdatePowerTemper() {
        try {
            float power = devcontrol.GetDataCollecor().GetBatteryPower();
            this.Battery_input.setText(String.format("%.2f", power) + "%");
            float temp = devcontrol.GetDataCollecor().GetTemperature();
            this.Temper_input.setText(String.format("%.2f°C", temp));
        } catch (Exception ex) {
            FaultCenter.Instance().SendFaultReport(Level.SEVERE, ex.getMessage());
        }
    }

    private void Button_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_updateActionPerformed
        Button_update.setEnabled(false);
        UpdatePowerTemper();
        Button_update.setEnabled(true);
    }//GEN-LAST:event_Button_updateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Battery_input;
    private javax.swing.JButton Button_AddSnapShot;
    private javax.swing.JButton Button_DeletSnapShot;
    private javax.swing.JButton Button_SaveData;
    private javax.swing.JButton Button_SaveImage;
    private javax.swing.JButton Button_update;
    private javax.swing.JPanel DisplayArea;
    private javax.swing.JLabel Label_Battery1;
    private javax.swing.JLabel Label_Temper;
    private javax.swing.JLabel Temper_input;
    private javax.swing.JToggleButton ToggleButton_DataTable;
    // End of variables declaration//GEN-END:variables

}
